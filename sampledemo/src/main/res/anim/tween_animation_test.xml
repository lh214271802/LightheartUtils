<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android">
    <!--帧动画 ,在java代码中用AnimationUtils加载-->
    <!--对应Java代码中的AlphaAnimation，
    透明度从0.0-1.0 ，0.0表示全透明，1.0表示完全不透明 -->
    <alpha
        android:fromAlpha="0.1"
        android:toAlpha="1" />
    <!--对应Java代码中的ScaleAnimation，
    以左上角为原点，from-to代表的是缩放比例0.0-1.0，1表示原大小，0表示无;
    pivot表示缩放中心,可以是数值、百分数、百分数p 三种样式，比如 50、50%、50%p，
    例如当pivotX为数值时，表示在当前View的左上角，即原点处加上50px，做为起始缩放点；
    如果是50%，表示在当前控件的左上角加上自己宽度的50%做为起始点；
    如果是50%p，那么就是表示在当前的左上角加上父控件宽度的50%做为起始点x轴坐标-->
    <scale
        android:fromXScale="0"
        android:fromYScale="1"
        android:pivotX="50%"
        android:pivotY="50%"
        android:toXScale="1"
        android:toYScale="0.5" />
    <!--对应Java代码中的RotateAnimation，
    Degrees是旋转的角度位置，正值代表顺时针方向度数，负值代码逆时针方向度数；
    pivot的意义同上-->
    <rotate
        android:fromDegrees="0"
        android:pivotX="50%"
        android:pivotY="50%"
        android:toDegrees="180" />
    <!--对应Java代码中的TranslateAnimation，
    Delta的意义和pivot的取值及意义相同-->
    <translate
        android:fromXDelta="100%"
        android:toXDelta="0" />
</set><!--
     Interpolator插值器，用来定义动画执行过程中的具体行为，变化速率
     已经定义好了的插值器有这些
        AccelerateDecelerateInterpolator   在动画开始与介绍的地方速率改变比较慢，在中间的时候加速
        AccelerateInterpolator                     在动画开始的地方速率改变比较慢，然后开始加速
        AnticipateInterpolator                      开始的时候向后然后向前甩
        AnticipateOvershootInterpolator     开始的时候向后然后向前甩一定值后返回最后的值
        BounceInterpolator                          动画结束的时候弹起
        CycleInterpolator                             动画循环播放特定的次数，速率改变沿着正弦曲线
        DecelerateInterpolator                    在动画开始的地方快然后慢
        LinearInterpolator                            以常量速率改变
        OvershootInterpolator                      向前甩一定值后再回到原来位置
     -->